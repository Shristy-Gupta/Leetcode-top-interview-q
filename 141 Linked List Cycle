/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL || head->next==NULL){
            return false;
        }
        //Floyed cycle detection
        ListNode* fast=head->next->next;
        ListNode* slow=head;
        while(fast!=NULL){
         if(fast==slow){
             return true;
         } 
         slow=slow->next;
         if(slow==NULL){
             break;
         }
          else{
              fast=fast->next;
              if(fast!=NULL){
                  fast=fast->next;
              }
          }  
        }
     return false;   
    }
};

// I have used peak valley theorem

//Stocks buy and sell Part 2-->IMP


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        int n = prices.size();
        if(n==0 || n==1)
            return 0;
        else if(n==2)
            return max(0,prices[1]-prices[0]);
        int min=prices[0],i=1;
        int max=prices[0],profit=0;
        bool maxdone=false, mindone=true;
        while(i<n){
           while(i<n && prices[i]<=prices[i-1]){
               min=prices[i];
               mindone=true;
               i++; 
           }
            while(i<n && prices[i]>=prices[i-1]){
                max=prices[i];
                maxdone=true;
                i++;
            }
            //We have local max and local min
            if(mindone && maxdone){
                profit+=max-min;
                mindone=false;
                maxdone=false;
            }
            
            
        }
        return profit;
        
    }
};





///////////////////////////////////EASY WAY///////////////////////
//Stocks buy and sell Part 2-->IMP


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxprofit = 0;
        int length=prices.size();
        for (int i = 1; i < length; i++) {
            if (prices[i] > prices[i - 1])
                maxprofit += prices[i] - prices[i - 1];
        }
        return maxprofit;
        
    }
};
